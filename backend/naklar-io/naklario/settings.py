"""
Django settings for lernroulette project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from email.utils import getaddresses
from pathlib import Path
from typing import List

import environ
from channels.routing import get_default_application
from django.core.asgi import get_asgi_application

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    CORS_ORIGIN_WHITELIST=(list, []),
)

# reading .env file
environ.Env.read_env(env_file=os.path.join(BASE_DIR.parent, '.env'))
SECRET_KEY = env('SECRET_KEY')

BBB_SHARED = env('BBB_SHARED')
BBB_URL = env('BBB_URL')

FORCE_SCRIPT_NAME = env.str('FORCE_SCRIPT_NAME', default=None)

DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10mb

API_HOST = env('API_URL')
HOST = env('FRONTEND_URL')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS: List[str] = env('ALLOWED_HOSTS')

CORS_ORIGIN_WHITELIST = env('CORS_ORIGIN_WHITELIST')
CORS_ORIGIN_WHITELIST.append(BBB_URL)

# Set custom user model
AUTH_USER_MODEL = 'account.CustomUser'
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'SECURITY_REQUIREMENTS': [
        {'Token': []},
    ],
    'REFETCH_SCHEMA_WITH_AUTH': True,
    'PERSIST_AUTH': True
}

# Rest framework
REST_FRAMEWORK = {
    'DEFAULT_PARSER_CLASSES': [
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        # 'rest_framework.parsers.JSONParser',
        #        'rest_framework.parsers.XMLParser',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
        # 'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'JSON_UNDERSCOREIZE': {
        'no_underscore_before_number': True,
    },

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'knox.auth.TokenAuthentication',
    ],
    'UPLOADED_FILES_USE_URL': True,
}

REST_KNOX = {
    "TOKEN_TTL": None
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'knox',
    # 3rd party libs
    'channels',
    'drf_yasg',
    'corsheaders',
    'drf_base64',
    'django_celery_beat',
    # our components
    'account',
    'scheduling',
    'roulette',
    'landing',
    'notify',
    '_shared',
    # 3rd party that needs to load last
    'simple_history',
    'post_office',
    'push_notifications',
    'multiselectfield'
]

ENABLE_DEBUG_TOOLBAR = env.bool('DEBUG_TOOLBAR', default=False)


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

if ENABLE_DEBUG_TOOLBAR:
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'naklario.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'filters': ['require_debug_true'],
            'level': 'INFO'
        }
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO'
    },
}

WSGI_APPLICATION = 'naklario.wsgi.application'

ASGI_APPLICATION = 'naklario.asgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': env.db(),
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'de-de'

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = env('STATIC_URL', default='/static/')
STATIC_ROOT = env('STATIC_ROOT', default=BASE_DIR / 'static')
if FORCE_SCRIPT_NAME:
    STATIC_URL = FORCE_SCRIPT_NAME + STATIC_URL
    WHITENOISE_STATIC_PREFIX = '/static/'
# STORAGES CONFIG
if env.bool('USE_S3'):
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_ENDPOINT_URL = env('AWS_S3_ENDPOINT')
    AWS_DEFAULT_ACL = env('AWS_DEFAULT_ACL', default='public')
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_QUERYSTRING_EXPIRE = 60*60*24*30
    MEDIA_URL = f"{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/"
else:
    MEDIA_URL = env('MEDIA_URL', default='/media/')
    MEDIA_ROOT = env('MEDIA_ROOT', default=BASE_DIR / 'media')

# Celery:
CELERY_APP = "naklario.celery"
CELERY_BROKER_URL = "redis://" + env('REDIS_HOST') + ":" + env('REDIS_PORT')

CELERY_ACCEPT_CONTENT = ['json', 'pickle']

# For reverse nginx proxy, we forward this. make sure this is being forwarded for all!
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

CHANNEL_REDIS_HOST = (env('REDIS_HOST'), env('REDIS_PORT'))
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [CHANNEL_REDIS_HOST],
        },
    },
}
#######################
# Email configuration #
#######################
EMAIL_DISABLE = env.bool('EMAIL_DISABLE', default=False)

EMAIL_BACKEND = 'post_office.EmailBackend'
POST_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.locmem.EmailBackend')
if EMAIL_DISABLE:
    POST_OFFICE = {
        'DEFAULT_PRIORITY': 'now',
        'CELERY_ENABLED': False
    }
else:
    POST_OFFICE = {
        'DEFAULT_PRIORITY': env('EMAIL_DEFAULT_PRIORITY', default='now'),
        'BACKENDS': {
            'default': POST_BACKEND
        },
        'CELERY_ENABLED': not EMAIL_DISABLE,
    }

if POST_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    EMAIL_HOST = env('EMAIL_HOST')
    EMAIL_PORT = env.int('EMAIL_PORT')
    EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
    EMAIL_HOST_USER = env('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

ADMINS = getaddresses([env('DJANGO_ADMINS')])
SERVER_EMAIL = env('SERVER_EMAIL')


# does this instance use access codes for students?
NAKLAR_USE_ACCESS_CODES = env.bool('NAKLAR_USE_ACCESS_CODES', default=False)
NAKLAR_SCHEDULING_SCHOOLDATA = env.bool('NAKLAR_SCHEDULING_SCHOOLDATA', default=False)
NAKLAR_SCHEDULING_APPOINTMENT_DISTANCE = env.int('NAKLAR_SCHEDULING_APPOINTMENT_DISTANCE', default=60*8)
